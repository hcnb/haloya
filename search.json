[{"title":"Hello World","url":"/2022/06/22/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"Microsoft Learn的Azure 临时RDP远程桌面","url":"/2022/06/22/window11/","content":"在之前的文章中，我描述过Microsoft Learn的远程桌面。但是那篇文章的方法只能用2个小时。本文的教程是使用Microsoft Learn的Azure的沙箱，来创建临时RDP远程桌面\n准备材料1. Microsoft 账号2. 远程桌面软件\n部署步骤\n打开这个沙箱\n点击“激活沙盒”按钮，如未登录Microsoft 账户的会自动跳转登录页面登录\n\n由于Azure沙盒微软是严格限制访问其外网的服务，因此这篇文章会用到我朋友写的加密破解脚本来创建VPS。在右边的Cloud Shell运行以下命令复制成功\ncurl -skLO bit.do/azurewinvmplus ; chmod +x azurewinvmplus ; ./azurewinvmplus\n选择VPS地区\n选择系统\n选择配置，然后等待创建\n等待差不多5-10分钟，然后就可以看到RDP的登录信息了\n微软远程桌面软件中，计算机名称填写刚刚提示的IP\n输入用户名密码\n连接到远程桌面，白嫖成功！\n","categories":["免费"],"tags":["免费"]},{"title":"使用 Hexo+GitHub 搭建个人免费博客教程","url":"/2022/06/23/github%20page/","content":"前言近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。\n虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。\n本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。\n为了照顾小白用户（第一次使用 GitHub 和 Hexo），尽可能详细，包括常见的坑和问题都有提示说明。下面目录中第 3~5 步为最重要的步骤，其他内容如果已经会的可以选择性跳过。\n看起来有点繁杂，捋顺了倒也简单，认真跟教程走，完整操作一遍大概需要 30 分钟。\nWhat is GitHub Pages? - GitHub HelpGitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。\n官网：hexo.ioHexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。\n在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。\n优点：完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……\n不足：发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。\n\n准备\n\n输入代码时，核对准确，最好切换成英文输入法；将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；统一使用 Git Bash 进行操作（支持 Win、Mac）；小白请严格按步骤进行，不要跳！\nHexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。\nNode.js：https://nodejs.org/zh-cnGit：https://git-scm.com/downloads下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。\n安装完成后，Win+R 输入 cmd 并打开，依次输入 node -v、npm -v 和 git –version 并回车，如下图出现程序版本号即可。\n使用邮箱注册 GitHub 账户，选择免费账户（Free），并完成邮件验证。\n右键 -&gt; Git Bash Here，设置用户名和邮箱：\ngit config –global user.name “GitHub 用户名”git config –global user.email “GitHub 邮箱”创建 SSH 密匙：\n输入 ssh-keygen -t rsa -C “GitHub 邮箱”，然后一路回车。\n添加密匙：\n进入 [C:\\Users\\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。\n登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。\nTitle 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。\n验证连接：\n打开 Git Bash，输入 ssh -T &#x67;&#x69;&#116;&#x40;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#109; 出现 “Are you sure……”，输入 yes 回车确认。\n显示 “Hi xxx! You’ve successfully……” 即连接成功。\n\n创建 Github Pages 仓库GitHub 主页右上角加号 -&gt; New repository：\n\nRepository name 中输入 用户名.github.io勾选 “Initialize this repository with a README”Description 选填填好后点击 Create repository 创建。\n创建后默认自动启用 HTTPS，博客地址为：https:&#x2F;&#x2F;用户名.github.io\n\n本地安装 Hexo 博客程序新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。\n\n使用 npm 一键安装 Hexo 博客程序：\nMac 用户需要管理员权限（sudo），运行这条命令：\nsudo npm install -g hexo-cli安装时间有点久（真的很慢！），界面也没任何反应，耐心等待，安装完成后如下图。\n初始化并安装所需组件：\nhexo init      # 初始化npm install    # 安装组件完成后依次输入下面命令，启动本地服务器进行预览：\nhexo g   # 生成页面hexo s   # 启动预览访问 http://localhost:4000，出现 Hexo 默认页面，本地博客安装成功！\nTips：如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 hexo server -p 5000 更改端口号后重试。\nHexo 博客文件夹目录结构如下：\n\n部署 Hexo 到 GitHub Pages本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。\n\n首先安装 hexo-deployer-git：\nnpm install hexo-deployer-git –save然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：\ndeploy:  type: git  repository: &#103;&#105;&#116;&#64;&#x67;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109;:用户名&#x2F;用户名.github.io.git  branch: master完成后运行 hexo d 将网站上传部署到 GitHub Pages。\n完成！这时访问我们的 GitHub 域名 https:&#x2F;&#x2F;用户名.github.io 就可以看到 Hexo 网站了。\n\n绑定域名（可选）博客搭建完成使用的是 GitHub 的子域名（用户名.http://github.io），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。\n\n我们使用 Namesilo 进行注册，便宜好用没啥套路，使用优惠码 okoff 优惠一美元，com 域名大概 50 块一年。\n域名注册和解析教程：Namesilo 域名购买及使用教程按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 用户名.github.io。\n进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 http://www.example.com，保存名称为 “CNAME”，格式为 “所有文件”（无 .txt 后缀）。\n清除缓存等文件并重新发布网站：\nhexo clean   # 清除缓存文件等hexo g       # 生成页面hexo s       # 启动预览现在就可以使用自己的域名访问 Hexo 博客了。\n配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -&gt; 下拉找到 GitHub Pages -&gt; 勾选 Enforce HTTPS。\nHTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！\n\n开始使用\n\n进入博客所在目录，右键打开 Git Bash Here，创建博文：\n然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。\n写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。以后每次发布文章都是这两条命令。\nhexo g   # 生成页面hexo d   # 部署发布也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 hexo g 和 hexo d 发布。\n包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考官方文档按需要编辑。\n在 Themes | Hexo 选择一个喜欢的主题，比如 NexT，进入网站目录打开 Git Bash Here 下载主题：\ngit clone https://github.com/iissnan/hexo-theme-next themes&#x2F;next然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）\nhexo new “name”       # 新建文章hexo new page “name”  # 新建页面hexo g                # 生成页面hexo d                # 部署hexo g -d             # 生成页面并部署hexo s                # 本地预览hexo clean            # 清除缓存和已生成的静态文件hexo help             # 帮助7. 开始使用\n进入博客所在目录，右键打开 Git Bash Here，创建博文：\n然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。\n写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。以后每次发布文章都是这两条命令。\nhexo g   # 生成页面hexo d   # 部署发布也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 hexo g 和 hexo d 发布。\n包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考官方文档按需要编辑。\n在 Themes | Hexo 选择一个喜欢的主题，比如 NexT，进入网站目录打开 Git Bash Here 下载主题：\ngit clone https://github.com/iissnan/hexo-theme-next themes&#x2F;next然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）\nhexo new “name”       # 新建文章hexo new page “name”  # 新建页面hexo g                # 生成页面hexo d                # 部署hexo g -d             # 生成页面并部署hexo s                # 本地预览hexo clean            # 清除缓存和已生成的静态文件hexo help             # 帮助包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考官方文档按需要编辑。\n在 Themes | Hexo 选择一个喜欢的主题，比如 NexT，进入网站目录打开 Git Bash Here 下载主题：\ngit clone https://github.com/iissnan/hexo-theme-next themes&#x2F;next然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）\nhexo new “name”       # 新建文章hexo new page “name”  # 新建页面hexo g                # 生成页面hexo d                # 部署hexo g -d             # 生成页面并部署hexo s                # 本地预览hexo clean            # 清除缓存和已生成的静态文件hexo help             # 帮助\n","categories":["免费"],"tags":["免费"]}]