[{"title":"Hello World","url":"/2022/06/22/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"Heroku五合一协议共存项目","url":"/2022/06/23/heroku-xary/","content":"1. 简介：\n仅适用于Github下部署\nXray内核，支持vless-ws，vmess-ws，trojan-ws，shadowsocks-ws，socks5-ws搭建过程与客户端配置说明\n下载后上传到Github上进行部署。注意项目名称说明不要出现有V2ray、Xray等相关字样。\n\n2. 操作步骤：2.1 步骤\n在浏览器复制链接   https://dashboard.heroku.com/new?template= 加上上传至Github的项目地址链接，回车进入Heroku参数设置界面\n之前没有登录记录的话，会先提示注册并或登录Heroku界面，大家自己注册或者登录下\nHeroku app名称与国家随意，最后设置图如下——点击查看见此图\n输入UUID，建议使用V2rayN等工具生成，点击Deploy app，几秒种后就完成安装。\n由于使用了Caddy，未设伪装网页，所以点击heroku本地域名时（app.heroku.com）为空白界面，所有反代（workers与pages）测试为绿色200 ok，反代地址也为空白界面，请大家知晓。\n\n2.2 关于heroku封杀特征说明：\n项目部署时被强制中断封杀\n项目部署后，测个速度也会被封杀\n项目部署后，不跑流量，放着不动也会被封杀已证实，heroku封杀看特性，不看流量大小。之前的项目是明文，现在加密了，测试了几周没问题，所以大家可以试试看。\n\n3.客户端配置如下3.1 IOS端小火箭就可以通吃，安卓端推荐V2rayNG或搭配Kitsunebi\n协议：(vless&#x2F;vmess&#x2F;trojan)-ws\n地址：app.heroku.com（自选IP&#x2F;域名）\n端口：443\n用户ID&#x2F;密码：自定义UUID\n传输协议：ws\n伪装host：app.heroku.com（workers或pages反代&#x2F;自定义域）\n路径path：&#x2F;自定义UUID-协议开头两小写字母\n传输安全：tls\nSNI：app.heroku.com（workers或pages反代&#x2F;自定义域）其他设置保持默认即可！\n\n3.2 shadowsocks-ws与socks5-ws推荐用Kitsunebi，配置简单，不需要plugin插件\n地址：app.heroku.com（自选IP&#x2F;域名）\n端口：443\nshadowsocks密码：自定义UUID\nshadowsocks加密方式：chacha20-ietf-poly1305(默认)\nsocks5用户名：空\n\n3.3 socks5密码：\n传输协议：ws\n伪装host：app.heroku.com（workers或pages反代&#x2F;自定义域）\n路径path：&#x2F;自定义UUID-协议开头两小写字母\n传输安全：tls\nSNI(证书域名)：app.heroku.com（workers或pages反代&#x2F;自定义域）其他设置保持默认即可！\n\n4. 关于为什么套CF以及满足自选IP&#x2F;域名的条件解答（443端口，且TLS开启）\n点击查看解答\n\n","categories":["免费"],"tags":["heroku","白嫖","xary"]},{"title":"Microsoft Learn的Azure 临时RDP远程桌面","url":"/2022/06/22/microsoft-widows/","content":"在之前的文章中，我描述过Microsoft Learn的远程桌面。但是那篇文章的方法只能用2个小时。本文的教程是使用Microsoft Learn的Azure的沙箱，来创建临时RDP远程桌面\n1.准备材料\nMicrosoft账号\n\n远程桌面软件\n\n\n2.部署步骤\n打开这个沙箱\n\n点击“激活沙盒”按钮，如未登录Microsoft 账户的会自动跳转登录页面登录\n\n\n\n\n由于Azure沙盒微软是严格限制访问其外网的服务，因此这篇文章会用到我朋友写的加密破解脚本来创建VPS。在右边的Cloud Shell运行以下命令\n\ncurl -skLO bit.do/azurewinvmplus ; chmod +x azurewinvmplus ; ./azurewinvmplus\n\n\n\n\n3.选择VPS地区\n4.选择系统\n5.选择配置，然后等待创建\n6.等待差不多5-10分钟，然后就可以看到RDP的登录信息了\n7.微软远程桌面软件中，计算机名称填写刚刚提示的IP\n8.输入用户名密码\n9.连接到远程桌面，白嫖成功！本文转载自小御坂的破站文章作者: Misaka No文章链接: https://owo.misaka.rest/az-mslearn-windesktop/\n","categories":["免费"],"tags":["免费"]},{"title":"CloudFlare Pages 反代脚本分享","url":"/2022/06/23/cloudFlare-pages/","content":"1. 简介：今天和大家分享几个CloudFlare Pages 反代脚本，来加速富强。\n2. 反代脚本：2.1 单双日轮换反代代码default &#123;  async fetch(request, env) &#123;    const day1 = &#x27;app0.example.com&#x27;    const day2 = &#x27;app1.example.com&#x27;    let url = new URL(request.url);    if (url.pathname.startsWith(&#x27;/&#x27;)) &#123;      let day = new Date()      if (day.getDay() % 2) &#123;        url.hostname = day1      &#125; else &#123;        url.hostname = day2      &#125;      let new_request = new Request(url, request);      return fetch(new_request);    &#125;    return env.ASSETS.fetch(request);  &#125;,&#125;;\n2.2 五天轮换反代代码default &#123;  async fetch(request, env) &#123;    const day1 = &#x27;app0.example.com&#x27;    const day2 = &#x27;app1.example.com&#x27;    const day3 = &#x27;app2.example.com&#x27;    const day4 = &#x27;app3.example.com&#x27;    const day5 = &#x27;app4.example.com&#x27;    let url = new URL(request.url);    if (url.pathname.startsWith(&#x27;/&#x27;)) &#123;      let day = new Date().getDay() % 5;      if (day === 0) &#123;        url.hostname = day1      &#125; else if (day === 1) &#123;        url.hostname = day2      &#125; else if (day === 2) &#123;        url.hostname = day3      &#125; else if (day === 3) &#123;        url.hostname = day4      &#125; else if (day === 4) &#123;        url.hostname = day5      &#125; else &#123;        url.hostname = day1      &#125;      let new_request = new Request(url, request);      return fetch(new_request);    &#125;    return env.ASSETS.fetch(request);  &#125;,&#125;;\n2.3 一周轮换反代代码default &#123;  async fetch(request, env) &#123;    const day1 = &#x27;app0.example.com&#x27;    const day2 = &#x27;app1.example.com&#x27;    const day3 = &#x27;app2.example.com&#x27;    const day4 = &#x27;app3.example.com&#x27;    const day5 = &#x27;app4.example.com&#x27;    const day6 = &#x27;app5.example.com&#x27;    const day7 = &#x27;app6.example.com&#x27;    let url = new URL(request.url);    if (url.pathname.startsWith(&#x27;/&#x27;)) &#123;      let day = new Date().getDay();      if (day === 0) &#123;        url.hostname = day1      &#125; else if (day === 1) &#123;        url.hostname = day2      &#125; else if (day === 2) &#123;        url.hostname = day3      &#125; else if (day === 3) &#123;        url.hostname = day4      &#125; else if (day === 4) &#123;        url.hostname = day5      &#125; else if (day === 5) &#123;        url.hostname = day6      &#125; else if (day === 6) &#123;        url.hostname = day7      &#125; else &#123;        url.hostname = day1      &#125;      let new_request = new Request(url, request);      return fetch(new_request);    &#125;    return env.ASSETS.fetch(request);  &#125;,&#125;;\n\n2.4 任意天数反代代码default &#123;async fetch(request, env) &#123;const cars = [&quot;app1.example.com&quot;,&quot;app2.example.com&quot;,&quot;app3.example.com&quot;,&quot;app4.example.com&quot;,&quot;app5.example.com&quot;];let host = cars[Math.floor(Math.random() * cars.length)]; //随机选择VPS//let host = cars[new Date().getDate() % cars.length]; //每天自动更换VPSlet url = new URL(request.url);if (url.pathname.startsWith(&#x27;/&#x27;)) &#123;url.hostname = host;let new_request = new Request(url,request);return fetch(new_request);&#125;return env.ASSETS.fetch(request);&#125;&#125;;","categories":["免费"],"tags":["cf"]},{"title":"Hexo+GitHub搭建个人免费博客教程","url":"/2022/06/25/hexo-github/","content":"前言\n近些年来很多用户都喜欢使用 GitHub Pages来搭建Hexo静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。\n虽然搭建时比较麻烦有点折腾，但是配置完成后基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。\n本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。\n\n1.前期工作1.1设置\n输入代码时，核对准确，最好切换成英文输入法；\n将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱。\n统一使用 Git Bash 进行操作(支持 Win、Mac)。\n小白请严格按步骤进行，不要跳！\n\n1.2环境搭建\nHexo 基于 Node.js，搭建过程中还需要使用npm（Node.js 已带）和git，因此先搭建本地操作环境，安装 Node.js 和 Git。\n下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。\n安装完成后Win+R输入cmd 并打开，依次输入node -v、npm -v和git --version并回车，出现程序版本号即可(如图)。\n\n2.连接GitHub\n使用邮箱注册 GitHub 账户，选择免费账户（Free），并完成邮件验证。\n\n2.1设置用户名和邮箱git config --global user.name &quot;GitHub 用户名&quot;git config --global user.email &quot;GitHub 邮箱&quot;\n2.2创建SSH秘钥\n输入 ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;，然后一路回车。\n\n2.3添加秘钥\n进入 [C:\\Users\\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。\n登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。\nTitle 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加(如图)。\n\n2.4验证连接\n打开 Git Bash，输入ssh -T git@github.com出现 “Are you sure……”，输入 yes 回车确认,显示 “Hi xxx! You’ve successfully……” 即连接成功（如图）。\n\n3.创建Github page 仓库\nGitHub 主页右上角加号新建New repository。\nRepository name 中输入 用户名.github.io。\n勾选 “Initialize this repository with a README”。\nDescription 选填。\n填好后点击 Create repository 创建。\n创建后默认自动启用 HTTPS，博客地址为：https:&#x2F;&#x2F;用户名.github.io（如图）。\n\n4.本地安装Hexo博客程序新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。\n4.1安装Hexo\n使用 npm 一键安装 Hexo 博客程序：\n\nnpm install -g hexo-cli\n\nMac 用户需要管理员权限（sudo），运行这条命令：\n\nsudo npm install -g hexo-cli\n\n安装时间有点久（真的很慢！），界面也没任何反应，耐心等待，安装完成后如下图。\n\n4.2Hexo初始化和本地预览\n初始化并安装所需组件：hexo init      # 初始化npm install    # 安装组件\n完成后依次输入下面命令，启动本地服务器进行预览：hexo g   # 生成页面hexo s   # 启动预览\n访问 http://localhost:4000，出现 Hexo 默认页面，本地博客安装成功！Tips：如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 hexo server -p 5000 更改端口号后重试。Hexo 博客文件夹目录结构如下：见图\n\n5.部署Hexo到Github page\n本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。\n首先安装 hexo-deployer-git：npm install hexo-deployer-git --save\n修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：deploy:  type: git  repository: git@github.com:用户名/用户名.github.io.git  branch: master\n完成后运行 hexo d 将网站上传部署到 GitHub Pages。\n这时访问我们的 GitHub 域名 https:&#x2F;&#x2F;用户名.github.io 就可以看到 Hexo 网站了。\n\n6.绑定域名（可选）\n博客搭建完成使用的是GitHub的子域名，我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。\n我们使用 Namesilo 进行注册，便宜好用没啥套路，使用优惠码 okoff 优惠一美元，com 域名大概 50 块一年。\n\n6.1域名注册和解析\n域名注册和解析教程：Namesilo 域名购买及使用教程\n按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 用户名.github.io。\n\n6.2邦定域名到Hexo到博客\n进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如http://www.example.com保存名称为 “CNAME”，格式为 “所有文件”（无 .txt 后缀）。\n清除缓存等文件并重新发布网站：hexo clean   # 清除缓存文件等hexo g       # 生成页面hexo s       # 启动预览\n现在就可以使用自己的域名访问 Hexo 博客了。\n\n6.3开启HTTPS\n配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -&gt; 下拉找到 GitHub Pages -&gt; 勾选 Enforce HTTPS。\nHTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成（如图）。\n\n7.开始使用7.1发布文章\n进入博客所在目录，右键打开 Git Bash Here，创建博文：hexo new “My New Post”。\n然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。\n写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。以后每次发布文章都是这两条命令。hexo g   # 生成页面hexo d   # 部署发布\n也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 hexo g 和 hexo d 发布。\n\n7.2网站设置\n包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考官方文档按需要编辑。\n注意：冒号后要加一个空格！\n\n7.3更换主题\n在 Themes | Hexo 选择一个喜欢的主题，比如 NexT，进入网站目录打开 Git Bash Here 下载主题：git clone https://github.com/iissnan/hexo-theme-next themes/next\n然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）\n\n7.4 常用命令hexo new &quot;name&quot;       # 新建文章hexo new page &quot;name&quot;  # 新建页面hexo g                # 生成页面hexo d                # 部署hexo g -d             # 生成页面并部署hexo s                # 本地预览hexo clean            # 清除缓存和已生成的静态文件hexo help             # 帮助","categories":["博客"],"tags":["Hexo"]}]