<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-06-25T03:06:32.514Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo+GitHub搭建个人免费博客教程</title>
    <link href="http://example.com/2022/06/25/hexo-github/"/>
    <id>http://example.com/2022/06/25/hexo-github/</id>
    <published>2022-06-25T01:18:03.306Z</published>
    <updated>2022-06-25T03:06:32.514Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><ul><li>近些年来很多用户都喜欢使用 GitHub Pages来搭建Hexo静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。</li><li>虽然搭建时比较麻烦有点折腾，但是配置完成后基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。</li><li>本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。</li></ul><h5 id="1-前期工作"><a href="#1-前期工作" class="headerlink" title="1.前期工作"></a>1.前期工作</h5><h6 id="1-1设置"><a href="#1-1设置" class="headerlink" title="1.1设置"></a>1.1设置</h6><ul><li>输入代码时，核对准确，最好切换成英文输入法；</li><li>将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱。</li><li>统一使用 Git Bash 进行操作(支持 Win、Mac)。</li><li>小白请严格按步骤进行，不要跳！</li></ul><h6 id="1-2环境搭建"><a href="#1-2环境搭建" class="headerlink" title="1.2环境搭建"></a>1.2环境搭建</h6><ul><li>Hexo 基于 Node.js，搭建过程中还需要使用npm（Node.js 已带）和git，因此先搭建本地操作环境，安装 Node.js 和 Git。</li><li>下载 <a class="link"   href="https://nodejs.org/zh-cn" >Node.js<i class="fas fa-external-link-alt"></i></a> 和 <a class="link"   href="https://git-scm.com/downloads" >Git<i class="fas fa-external-link-alt"></i></a> 程序并安装，一路点 “下一步” 按默认配置完成安装。</li><li>安装完成后Win+R输入cmd 并打开，依次输入<code>node -v</code>、<code>npm -v</code>和<code>git --version</code>并回车，出现程序版本号即可(<a class="link"   href="https://cdn.jsdelivr.net/gh/yayaniub/PicX@master/20220625/image.2mhge3yu3200.webp" >如图<i class="fas fa-external-link-alt"></i></a>)。</li></ul><h5 id="2-连接GitHub"><a href="#2-连接GitHub" class="headerlink" title="2.连接GitHub"></a>2.连接GitHub</h5><ul><li>使用邮箱注册 GitHub 账户，选择免费账户（Free），并完成邮件验证。</li></ul><h6 id="2-1设置用户名和邮箱"><a href="#2-1设置用户名和邮箱" class="headerlink" title="2.1设置用户名和邮箱"></a>2.1设置用户名和邮箱</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure><h6 id="2-2创建SSH秘钥"><a href="#2-2创建SSH秘钥" class="headerlink" title="2.2创建SSH秘钥"></a>2.2创建SSH秘钥</h6><ul><li>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</li></ul><h6 id="2-3添加秘钥"><a href="#2-3添加秘钥" class="headerlink" title="2.3添加秘钥"></a>2.3添加秘钥</h6><ul><li>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</li><li>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</li><li>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加(<a class="link"   href="https://cdn.jsdelivr.net/gh/yayaniub/PicX@master/20220625/image.2w99mbd8v3e0.webp" >如图<i class="fas fa-external-link-alt"></i></a>)。</li></ul><h6 id="2-4验证连接"><a href="#2-4验证连接" class="headerlink" title="2.4验证连接"></a>2.4验证连接</h6><ul><li>打开 Git Bash，输入<code>ssh -T git@github.com</code>出现 “Are you sure……”，输入 yes 回车确认,显示 “Hi xxx! You’ve successfully……” 即连接成功（<a class="link"   href="https://cdn.jsdelivr.net/gh/yayaniub/PicX@master/20220625/image.2i5ahojv9ny0.webp" >如图<i class="fas fa-external-link-alt"></i></a>）。</li></ul><h5 id="3-创建Github-page-仓库"><a href="#3-创建Github-page-仓库" class="headerlink" title="3.创建Github page 仓库"></a>3.创建Github page 仓库</h5><ul><li>GitHub 主页右上角加号新建New repository。</li><li>Repository name 中输入 用户名.github.io。</li><li>勾选 “Initialize this repository with a README”。</li><li>Description 选填。</li><li>填好后点击 Create repository 创建。</li><li>创建后默认自动启用 HTTPS，博客地址为：https:&#x2F;&#x2F;用户名.github.io（<a class="link"   href="https://cdn.jsdelivr.net/gh/yayaniub/PicX@master/20220625/image.1t9uy9akj9cw.webp" >如图<i class="fas fa-external-link-alt"></i></a>）。</li></ul><h5 id="4-本地安装Hexo博客程序"><a href="#4-本地安装Hexo博客程序" class="headerlink" title="4.本地安装Hexo博客程序"></a>4.本地安装Hexo博客程序</h5><p>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</p><h6 id="4-1安装Hexo"><a href="#4-1安装Hexo" class="headerlink" title="4.1安装Hexo"></a>4.1安装Hexo</h6><ul><li>使用 npm 一键安装 Hexo 博客程序：</li></ul><p><code>npm install -g hexo-cli</code></p><ul><li>Mac 用户需要管理员权限（sudo），运行这条命令：</li></ul><p><code>sudo npm install -g hexo-cli</code></p><ul><li>安装时间有点久（真的很慢！），界面也没任何反应，耐心等待，安装完成后如<a class="link"   href="https://cdn.jsdelivr.net/gh/yayaniub/PicX@master/20220625/image.7cwjtge5f0s0.webp" >下图<i class="fas fa-external-link-alt"></i></a>。</li></ul><h6 id="4-2Hexo初始化和本地预览"><a href="#4-2Hexo初始化和本地预览" class="headerlink" title="4.2Hexo初始化和本地预览"></a>4.2Hexo初始化和本地预览</h6><ul><li>初始化并安装所需组件：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init      # 初始化</span><br><span class="line">npm install    # 安装组件</span><br></pre></td></tr></table></figure></li><li>完成后依次输入下面命令，启动本地服务器进行预览：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo s   # 启动预览</span><br></pre></td></tr></table></figure></li><li>访问 <a class="link"   href="http://localhost:4000/" >http://localhost:4000<i class="fas fa-external-link-alt"></i></a>，出现 Hexo <a class="link"   href="https://cdn.jsdelivr.net/gh/yayaniub/PicX@master/20220625/image.1udpu2fcgmb.webp" >默认页面<i class="fas fa-external-link-alt"></i></a>，本地博客安装成功！<br>Tips：如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 hexo server -p 5000 更改端口号后重试。<br>Hexo 博客文件夹目录结构如下：<a class="link"   href="https://cdn.jsdelivr.net/gh/yayaniub/PicX@master/20220625/image.4dvy6ftthp40.webp" >见图<i class="fas fa-external-link-alt"></i></a></li></ul><h5 id="5-部署Hexo到Github-page"><a href="#5-部署Hexo到Github-page" class="headerlink" title="5.部署Hexo到Github page"></a>5.部署Hexo到Github page</h5><ul><li>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</li><li>首先安装 hexo-deployer-git：<br><code>npm install hexo-deployer-git --save</code></li><li>修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li>完成后运行 hexo d 将网站上传部署到 GitHub Pages。</li><li>这时访问我们的 GitHub 域名 <a class="link"   href="https://用户名.github.io/" >https:&#x2F;&#x2F;用户名.github.io<i class="fas fa-external-link-alt"></i></a> 就可以看到 Hexo 网站了。</li></ul><h5 id="6-绑定域名（可选）"><a href="#6-绑定域名（可选）" class="headerlink" title="6.绑定域名（可选）"></a>6.绑定域名（可选）</h5><ul><li>博客搭建完成使用的是GitHub的子域名，我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。</li><li>我们使用 Namesilo 进行注册，便宜好用没啥套路，使用优惠码 okoff 优惠一美元，com 域名大概 50 块一年。</li></ul><h6 id="6-1域名注册和解析"><a href="#6-1域名注册和解析" class="headerlink" title="6.1域名注册和解析"></a>6.1域名注册和解析</h6><ul><li>域名注册和解析教程：Namesilo 域名购买及使用教程</li><li>按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 用户名.github.io。</li></ul><h6 id="6-2邦定域名到Hexo到博客"><a href="#6-2邦定域名到Hexo到博客" class="headerlink" title="6.2邦定域名到Hexo到博客"></a>6.2邦定域名到Hexo到博客</h6><ul><li>进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如<a class="link"   href="http://www.example.com/" >http://www.example.com<i class="fas fa-external-link-alt"></i></a>保存名称为 “CNAME”，格式为 “所有文件”（无 .txt 后缀）。</li><li>清除缓存等文件并重新发布网站：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   # 清除缓存文件等</span><br><span class="line">hexo g       # 生成页面</span><br><span class="line">hexo s       # 启动预览</span><br></pre></td></tr></table></figure></li><li>现在就可以使用自己的域名访问 Hexo 博客了。</li></ul><h6 id="6-3开启HTTPS"><a href="#6-3开启HTTPS" class="headerlink" title="6.3开启HTTPS"></a>6.3开启HTTPS</h6><ul><li>配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -&gt; 下拉找到 GitHub Pages -&gt; 勾选 Enforce HTTPS。</li><li>HTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成（<a class="link"   href="https://cdn.jsdelivr.net/gh/yayaniub/PicX@master/20220625/image.51xxuo1rtsc0.webp" >如图<i class="fas fa-external-link-alt"></i></a>）。</li></ul><h5 id="7-开始使用"><a href="#7-开始使用" class="headerlink" title="7.开始使用"></a>7.开始使用</h5><h6 id="7-1发布文章"><a href="#7-1发布文章" class="headerlink" title="7.1发布文章"></a>7.1发布文章</h6><ul><li>进入博客所在目录，右键打开 Git Bash Here，创建博文：hexo new “My New Post”。</li><li>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</li><li>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。以后每次发布文章都是这两条命令。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo d   # 部署发布</span><br></pre></td></tr></table></figure></li><li>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 hexo g 和 hexo d 发布。</li></ul><h6 id="7-2网站设置"><a href="#7-2网站设置" class="headerlink" title="7.2网站设置"></a>7.2网站设置</h6><ul><li>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考官方文档按需要编辑。</li><li>注意：冒号后要加一个空格！</li></ul><h6 id="7-3更换主题"><a href="#7-3更换主题" class="headerlink" title="7.3更换主题"></a>7.3更换主题</h6><ul><li>在 Themes | Hexo 选择一个喜欢的主题，比如 NexT，进入网站目录打开 Git Bash Here 下载主题：<br><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></li><li>然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</li></ul><h6 id="7-4-常用命令"><a href="#7-4-常用命令" class="headerlink" title="7.4 常用命令"></a>7.4 常用命令</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;name&quot;       # 新建文章</span><br><span class="line">hexo new page &quot;name&quot;  # 新建页面</span><br><span class="line">hexo g                # 生成页面</span><br><span class="line">hexo d                # 部署</span><br><span class="line">hexo g -d             # 生成页面并部署</span><br><span class="line">hexo s                # 本地预览</span><br><span class="line">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">hexo help             # 帮助</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;近些年来很多用户都喜欢使用 GitHub Pages来搭建Hexo静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。&lt;</summary>
      
    
    
    
    <category term="博客" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>CloudFlare Pages 反代脚本分享</title>
    <link href="http://example.com/2022/06/23/cloudFlare-pages/"/>
    <id>http://example.com/2022/06/23/cloudFlare-pages/</id>
    <published>2022-06-23T07:10:50.764Z</published>
    <updated>2022-06-23T07:24:56.157Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介："><a href="#1-简介：" class="headerlink" title="1. 简介："></a><strong>1. 简介：</strong></h4><p>今天和大家分享几个CloudFlare Pages 反代脚本，来加速富强。</p><h4 id="2-反代脚本："><a href="#2-反代脚本：" class="headerlink" title="2. 反代脚本："></a><strong>2. 反代脚本：</strong></h4><h5 id="2-1-单双日轮换反代代码"><a href="#2-1-单双日轮换反代代码" class="headerlink" title="2.1 单双日轮换反代代码"></a><strong>2.1 单双日轮换反代代码</strong></h5><figure class="highlight plaintext"><figcaption><span>default &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  async fetch(request, env) &#123;</span><br><span class="line">    const day1 = &#x27;app0.example.com&#x27;</span><br><span class="line">    const day2 = &#x27;app1.example.com&#x27;</span><br><span class="line">    let url = new URL(request.url);</span><br><span class="line">    if (url.pathname.startsWith(&#x27;/&#x27;)) &#123;</span><br><span class="line">      let day = new Date()</span><br><span class="line">      if (day.getDay() % 2) &#123;</span><br><span class="line">        url.hostname = day1</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        url.hostname = day2</span><br><span class="line">      &#125;</span><br><span class="line">      let new_request = new Request(url, request);</span><br><span class="line">      return fetch(new_request);</span><br><span class="line">    &#125;</span><br><span class="line">    return env.ASSETS.fetch(request);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="2-2-五天轮换反代代码"><a href="#2-2-五天轮换反代代码" class="headerlink" title="2.2 五天轮换反代代码"></a><strong>2.2 五天轮换反代代码</strong></h5><figure class="highlight plaintext"><figcaption><span>default &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  async fetch(request, env) &#123;</span><br><span class="line">    const day1 = &#x27;app0.example.com&#x27;</span><br><span class="line">    const day2 = &#x27;app1.example.com&#x27;</span><br><span class="line">    const day3 = &#x27;app2.example.com&#x27;</span><br><span class="line">    const day4 = &#x27;app3.example.com&#x27;</span><br><span class="line">    const day5 = &#x27;app4.example.com&#x27;</span><br><span class="line">    let url = new URL(request.url);</span><br><span class="line">    if (url.pathname.startsWith(&#x27;/&#x27;)) &#123;</span><br><span class="line">      let day = new Date().getDay() % 5;</span><br><span class="line">      if (day === 0) &#123;</span><br><span class="line">        url.hostname = day1</span><br><span class="line">      &#125; else if (day === 1) &#123;</span><br><span class="line">        url.hostname = day2</span><br><span class="line">      &#125; else if (day === 2) &#123;</span><br><span class="line">        url.hostname = day3</span><br><span class="line">      &#125; else if (day === 3) &#123;</span><br><span class="line">        url.hostname = day4</span><br><span class="line">      &#125; else if (day === 4) &#123;</span><br><span class="line">        url.hostname = day5</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        url.hostname = day1</span><br><span class="line">      &#125;</span><br><span class="line">      let new_request = new Request(url, request);</span><br><span class="line">      return fetch(new_request);</span><br><span class="line">    &#125;</span><br><span class="line">    return env.ASSETS.fetch(request);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="2-3-一周轮换反代代码"><a href="#2-3-一周轮换反代代码" class="headerlink" title="2.3 一周轮换反代代码"></a><strong>2.3 一周轮换反代代码</strong></h5><figure class="highlight plaintext"><figcaption><span>default &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">  async fetch(request, env) &#123;</span><br><span class="line">    const day1 = &#x27;app0.example.com&#x27;</span><br><span class="line">    const day2 = &#x27;app1.example.com&#x27;</span><br><span class="line">    const day3 = &#x27;app2.example.com&#x27;</span><br><span class="line">    const day4 = &#x27;app3.example.com&#x27;</span><br><span class="line">    const day5 = &#x27;app4.example.com&#x27;</span><br><span class="line">    const day6 = &#x27;app5.example.com&#x27;</span><br><span class="line">    const day7 = &#x27;app6.example.com&#x27;</span><br><span class="line">    let url = new URL(request.url);</span><br><span class="line">    if (url.pathname.startsWith(&#x27;/&#x27;)) &#123;</span><br><span class="line">      let day = new Date().getDay();</span><br><span class="line">      if (day === 0) &#123;</span><br><span class="line">        url.hostname = day1</span><br><span class="line">      &#125; else if (day === 1) &#123;</span><br><span class="line">        url.hostname = day2</span><br><span class="line">      &#125; else if (day === 2) &#123;</span><br><span class="line">        url.hostname = day3</span><br><span class="line">      &#125; else if (day === 3) &#123;</span><br><span class="line">        url.hostname = day4</span><br><span class="line">      &#125; else if (day === 4) &#123;</span><br><span class="line">        url.hostname = day5</span><br><span class="line">      &#125; else if (day === 5) &#123;</span><br><span class="line">        url.hostname = day6</span><br><span class="line">      &#125; else if (day === 6) &#123;</span><br><span class="line">        url.hostname = day7</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        url.hostname = day1</span><br><span class="line">      &#125;</span><br><span class="line">      let new_request = new Request(url, request);</span><br><span class="line">      return fetch(new_request);</span><br><span class="line">    &#125;</span><br><span class="line">    return env.ASSETS.fetch(request);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="2-4-任意天数反代代码"><a href="#2-4-任意天数反代代码" class="headerlink" title="2.4 任意天数反代代码"></a><strong>2.4 任意天数反代代码</strong></h5><figure class="highlight plaintext"><figcaption><span>default &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">async fetch(request, env) &#123;</span><br><span class="line">const cars = [</span><br><span class="line">&quot;app1.example.com&quot;,</span><br><span class="line">&quot;app2.example.com&quot;,</span><br><span class="line">&quot;app3.example.com&quot;,</span><br><span class="line">&quot;app4.example.com&quot;,</span><br><span class="line">&quot;app5.example.com&quot;</span><br><span class="line">];</span><br><span class="line">let host = cars[Math.floor(Math.random() * cars.length)]; //随机选择VPS</span><br><span class="line">//let host = cars[new Date().getDate() % cars.length]; //每天自动更换VPS</span><br><span class="line">let url = new URL(request.url);</span><br><span class="line">if (url.pathname.startsWith(&#x27;/&#x27;)) &#123;</span><br><span class="line">url.hostname = host;</span><br><span class="line">let new_request = new Request(url,request);</span><br><span class="line">return fetch(new_request);</span><br><span class="line">&#125;</span><br><span class="line">return env.ASSETS.fetch(request);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-简介：&quot;&gt;&lt;a href=&quot;#1-简介：&quot; class=&quot;headerlink&quot; title=&quot;1. 简介：&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. 简介：&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;今天和大家分享几个CloudFlare Pages 反代脚本，来加速富强。&lt;/</summary>
      
    
    
    
    <category term="免费" scheme="http://example.com/categories/%E5%85%8D%E8%B4%B9/"/>
    
    
    <category term="cf" scheme="http://example.com/tags/cf/"/>
    
  </entry>
  
  <entry>
    <title>Heroku五合一协议共存项目</title>
    <link href="http://example.com/2022/06/23/heroku-xary/"/>
    <id>http://example.com/2022/06/23/heroku-xary/</id>
    <published>2022-06-22T19:25:52.600Z</published>
    <updated>2022-06-24T02:23:34.229Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介："><a href="#1-简介：" class="headerlink" title="1. 简介："></a><strong>1. 简介：</strong></h4><ul><li>仅适用于Github下部署</li><li>Xray内核，支持vless-ws，vmess-ws，trojan-ws，shadowsocks-ws，socks5-ws搭建过程与客户端配置说明</li><li>下载后上传到Github上进行部署。注意项目名称说明不要出现有V2ray、Xray等相关字样。</li></ul><h4 id="2-操作步骤："><a href="#2-操作步骤：" class="headerlink" title="2. 操作步骤："></a><strong>2. 操作步骤：</strong></h4><h5 id="2-1-步骤"><a href="#2-1-步骤" class="headerlink" title="2.1 步骤"></a><strong>2.1 步骤</strong></h5><ul><li>在浏览器复制链接   <a class="link"   href="https://dashboard.heroku.com/new?template=" >https://dashboard.heroku.com/new?template=<i class="fas fa-external-link-alt"></i></a> 加上上传至Github的项目地址链接，回车进入Heroku参数设置界面</li><li>之前没有登录记录的话，会先提示注册并或登录Heroku界面，大家自己注册或者登录下</li><li>Heroku app名称与国家随意，最后设置图如下——<a class="link"   href="https://cdn.jsdelivr.net/gh/yayaniub/PicX@master/20220623/image.30q5nzo27ak0.webp" >点击查看见此图<i class="fas fa-external-link-alt"></i></a></li><li>输入UUID，建议使用V2rayN等工具生成，点击Deploy app，几秒种后就完成安装。</li><li>由于使用了Caddy，未设伪装网页，所以点击heroku本地域名时（app.heroku.com）为空白界面，所有反代（workers与pages）测试为绿色200 ok，反代地址也为空白界面，请大家知晓。</li></ul><h5 id="2-2-关于heroku封杀特征说明："><a href="#2-2-关于heroku封杀特征说明：" class="headerlink" title="2.2 关于heroku封杀特征说明："></a><strong>2.2 关于heroku封杀特征说明：</strong></h5><ul><li>项目部署时被强制中断封杀</li><li>项目部署后，测个速度也会被封杀</li><li>项目部署后，不跑流量，放着不动也会被封杀<br><strong>已证实，heroku封杀看特性，不看流量大小。之前的项目是明文，现在加密了，测试了几周没问题，所以大家可以试试看。</strong></li></ul><h4 id="3-客户端配置如下"><a href="#3-客户端配置如下" class="headerlink" title="3.客户端配置如下"></a><strong>3.客户端配置如下</strong></h4><h5 id="3-1-IOS端小火箭就可以通吃，安卓端推荐V2rayNG或搭配Kitsunebi"><a href="#3-1-IOS端小火箭就可以通吃，安卓端推荐V2rayNG或搭配Kitsunebi" class="headerlink" title="3.1 IOS端小火箭就可以通吃，安卓端推荐V2rayNG或搭配Kitsunebi"></a><strong>3.1 IOS端小火箭就可以通吃，安卓端推荐V2rayNG或搭配Kitsunebi</strong></h5><ul><li>协议：(vless&#x2F;vmess&#x2F;trojan)-ws</li><li>地址：app.heroku.com（自选IP&#x2F;域名）</li><li>端口：443</li><li>用户ID&#x2F;密码：自定义UUID</li><li>传输协议：ws</li><li>伪装host：app.heroku.com（workers或pages反代&#x2F;自定义域）</li><li>路径path：&#x2F;自定义UUID-协议开头两小写字母</li><li>传输安全：tls</li><li>SNI：app.heroku.com（workers或pages反代&#x2F;自定义域）<br><strong>其他设置保持默认即可！</strong></li></ul><h5 id="3-2-shadowsocks-ws与socks5-ws推荐用Kitsunebi，配置简单，不需要plugin插件"><a href="#3-2-shadowsocks-ws与socks5-ws推荐用Kitsunebi，配置简单，不需要plugin插件" class="headerlink" title="3.2 shadowsocks-ws与socks5-ws推荐用Kitsunebi，配置简单，不需要plugin插件"></a><strong>3.2 shadowsocks-ws与socks5-ws推荐用Kitsunebi，配置简单，不需要plugin插件</strong></h5><ul><li>地址：app.heroku.com（自选IP&#x2F;域名）</li><li>端口：443</li><li>shadowsocks密码：自定义UUID</li><li>shadowsocks加密方式：chacha20-ietf-poly1305(默认)</li><li>socks5用户名：空</li></ul><h5 id="3-3-socks5密码："><a href="#3-3-socks5密码：" class="headerlink" title="3.3 socks5密码："></a><strong>3.3 socks5密码：</strong></h5><ul><li>传输协议：ws</li><li>伪装host：app.heroku.com（workers或pages反代&#x2F;自定义域）</li><li>路径path：&#x2F;自定义UUID-协议开头两小写字母</li><li>传输安全：tls</li><li>SNI(证书域名)：app.heroku.com（workers或pages反代&#x2F;自定义域）<br><strong>其他设置保持默认即可！</strong></li></ul><h4 id="4-关于为什么套CF以及满足自选IP-x2F-域名的条件解答（443端口，且TLS开启）"><a href="#4-关于为什么套CF以及满足自选IP-x2F-域名的条件解答（443端口，且TLS开启）" class="headerlink" title="4. 关于为什么套CF以及满足自选IP&#x2F;域名的条件解答（443端口，且TLS开启）"></a><strong>4. 关于为什么套CF以及满足自选IP&#x2F;域名的条件解答（443端口，且TLS开启）</strong></h4><ul><li><a class="link"   href="https://cdn.jsdelivr.net/gh/yayaniub/PicX@master/20220623/image.29nd3fiyizk0.webp" >点击查看解答<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-简介：&quot;&gt;&lt;a href=&quot;#1-简介：&quot; class=&quot;headerlink&quot; title=&quot;1. 简介：&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. 简介：&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;仅适用于Github下部署&lt;/li&gt;
&lt;li&gt;Xray内核，支持v</summary>
      
    
    
    
    <category term="免费" scheme="http://example.com/categories/%E5%85%8D%E8%B4%B9/"/>
    
    
    <category term="heroku" scheme="http://example.com/tags/heroku/"/>
    
    <category term="白嫖" scheme="http://example.com/tags/%E7%99%BD%E5%AB%96/"/>
    
    <category term="xary" scheme="http://example.com/tags/xary/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Learn的Azure 临时RDP远程桌面</title>
    <link href="http://example.com/2022/06/22/microsoft-widows/"/>
    <id>http://example.com/2022/06/22/microsoft-widows/</id>
    <published>2022-06-22T15:34:25.337Z</published>
    <updated>2022-06-23T06:35:47.661Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的文章中，我描述过Microsoft Learn的远程桌面。但是那篇文章的方法只能用2个小时。本文的教程是使用Microsoft Learn的Azure的沙箱，来创建临时RDP远程桌面</p><h5 id="1-准备材料"><a href="#1-准备材料" class="headerlink" title="1.准备材料"></a>1.准备材料</h5><ul><li><p>Microsoft账号</p></li><li><p>远程桌面软件</p></li></ul><h5 id="2-部署步骤"><a href="#2-部署步骤" class="headerlink" title="2.部署步骤"></a>2.部署步骤</h5><ul><li><p>打开这个沙箱</p></li><li><p>点击“激活沙盒”按钮，如未登录Microsoft 账户的会自动跳转登录页面登录</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yayaniub/PicX@master/20220623/image.39lh53zu8ey0.webp"></p><ul><li>由于Azure沙盒微软是严格限制访问其外网的服务，因此这篇文章会用到我朋友写的加密破解脚本来创建VPS。在右边的Cloud Shell运行以下命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -skLO bit.do/azurewinvmplus ; chmod +x azurewinvmplus ; ./azurewinvmplus</span><br></pre></td></tr></table></figure><h5 id="3-选择VPS地区"><a href="#3-选择VPS地区" class="headerlink" title="3.选择VPS地区"></a>3.选择VPS地区</h5><p><img src="https://cdn.jsdelivr.net/gh/yayaniub/PicX@master/20220623/image.39lh53zu8ey0.webp"></p><h5 id="4-选择系统"><a href="#4-选择系统" class="headerlink" title="4.选择系统"></a>4.选择系统</h5><p><img src="https://cdn.jsdelivr.net/gh/yayaniub/PicX@master/20220623/image.qg9f5ek55n4.webp"></p><h5 id="5-选择配置，然后等待创建"><a href="#5-选择配置，然后等待创建" class="headerlink" title="5.选择配置，然后等待创建"></a>5.选择配置，然后等待创建</h5><p><img src="https://cdn.jsdelivr.net/gh/yayaniub/PicX@master/20220623/image.2h36ov0t6ky0.webp"></p><h5 id="6-等待差不多5-10分钟，然后就可以看到RDP的登录信息了"><a href="#6-等待差不多5-10分钟，然后就可以看到RDP的登录信息了" class="headerlink" title="6.等待差不多5-10分钟，然后就可以看到RDP的登录信息了"></a>6.等待差不多5-10分钟，然后就可以看到RDP的登录信息了</h5><p><img src="https://cdn.jsdelivr.net/gh/yayaniub/PicX@master/20220623/image.30m7vm7bttc0.webp"></p><h5 id="7-微软远程桌面软件中，计算机名称填写刚刚提示的IP"><a href="#7-微软远程桌面软件中，计算机名称填写刚刚提示的IP" class="headerlink" title="7.微软远程桌面软件中，计算机名称填写刚刚提示的IP"></a>7.微软远程桌面软件中，计算机名称填写刚刚提示的IP</h5><p><img src="https://cdn.jsdelivr.net/gh/yayaniub/PicX@master/20220623/image.50ezwnd4iac0.webp"></p><h5 id="8-输入用户名密码"><a href="#8-输入用户名密码" class="headerlink" title="8.输入用户名密码"></a>8.输入用户名密码</h5><p><img src="https://cdn.jsdelivr.net/gh/yayaniub/PicX@master/20220623/image.33ie6b3sdoa0.webp"></p><h5 id="9-连接到远程桌面，白嫖成功！"><a href="#9-连接到远程桌面，白嫖成功！" class="headerlink" title="9.连接到远程桌面，白嫖成功！"></a>9.连接到远程桌面，白嫖成功！</h5><p>本文转载自小御坂的破站<br>文章作者: Misaka No<br>文章链接: <a class="link"   href="https://owo.misaka.rest/az-mslearn-windesktop/" >https://owo.misaka.rest/az-mslearn-windesktop/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在之前的文章中，我描述过Microsoft Learn的远程桌面。但是那篇文章的方法只能用2个小时。本文的教程是使用Microsoft Learn的Azure的沙箱，来创建临时RDP远程桌面&lt;/p&gt;
&lt;h5 id=&quot;1-准备材料&quot;&gt;&lt;a href=&quot;#1-准备材料&quot; cla</summary>
      
    
    
    
    <category term="免费" scheme="http://example.com/categories/%E5%85%8D%E8%B4%B9/"/>
    
    
    <category term="免费" scheme="http://example.com/tags/%E5%85%8D%E8%B4%B9/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/06/22/hello-world/"/>
    <id>http://example.com/2022/06/22/hello-world/</id>
    <published>2022-06-22T12:56:13.560Z</published>
    <updated>2022-06-22T12:56:13.560Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Che</summary>
      
    
    
    
    
  </entry>
  
</feed>
