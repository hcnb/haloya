<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-06-22T19:59:06.972Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 Hexo+GitHub 搭建个人免费博客教程</title>
    <link href="http://example.com/2022/06/23/github%20page/"/>
    <id>http://example.com/2022/06/23/github%20page/</id>
    <published>2022-06-22T19:25:52.600Z</published>
    <updated>2022-06-22T19:59:06.972Z</updated>
    
    <content type="html"><![CDATA[<p>前言<br>近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。</p><p>虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。</p><p>本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。</p><p>为了照顾小白用户（第一次使用 GitHub 和 Hexo），尽可能详细，包括常见的坑和问题都有提示说明。下面目录中第 3~5 步为最重要的步骤，其他内容如果已经会的可以选择性跳过。</p><p>看起来有点繁杂，捋顺了倒也简单，认真跟教程走，完整操作一遍大概需要 30 分钟。</p><p>What is GitHub Pages? - GitHub Help<br>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p><p>官网：hexo.io<br>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p><p>优点：完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……</p><p>不足：发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。</p><ol><li>准备</li></ol><p>输入代码时，核对准确，最好切换成英文输入法；<br>将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；<br>统一使用 Git Bash 进行操作（支持 Win、Mac）；<br>小白请严格按步骤进行，不要跳！</p><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p><p>Node.js：<a class="link"   href="https://nodejs.org/zh-cn" >https://nodejs.org/zh-cn<i class="fas fa-external-link-alt"></i></a><br>Git：<a class="link"   href="https://git-scm.com/downloads" >https://git-scm.com/downloads<i class="fas fa-external-link-alt"></i></a><br>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p><p>安装完成后，Win+R 输入 cmd 并打开，依次输入 node -v、npm -v 和 git –version 并回车，如下图出现程序版本号即可。</p><p>使用邮箱注册 GitHub 账户，选择免费账户（Free），并完成邮件验证。</p><p>右键 -&gt; Git Bash Here，设置用户名和邮箱：</p><p>git config –global user.name “GitHub 用户名”<br>git config –global user.email “GitHub 邮箱”<br>创建 SSH 密匙：</p><p>输入 ssh-keygen -t rsa -C “GitHub 邮箱”，然后一路回车。</p><p>添加密匙：</p><p>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p><p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p><p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p><p>验证连接：</p><p>打开 Git Bash，输入 ssh -T <a class="link"   href="mailto:&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#109;" >&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#109;<i class="fas fa-external-link-alt"></i></a> 出现 “Are you sure……”，输入 yes 回车确认。</p><p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p><ol start="3"><li>创建 Github Pages 仓库<br>GitHub 主页右上角加号 -&gt; New repository：</li></ol><p>Repository name 中输入 用户名.github.io<br>勾选 “Initialize this repository with a README”<br>Description 选填<br>填好后点击 Create repository 创建。</p><p>创建后默认自动启用 HTTPS，博客地址为：https:&#x2F;&#x2F;用户名.github.io</p><ol start="4"><li>本地安装 Hexo 博客程序<br>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</li></ol><p>使用 npm 一键安装 Hexo 博客程序：</p><p>Mac 用户需要管理员权限（sudo），运行这条命令：</p><p>sudo npm install -g hexo-cli<br>安装时间有点久（真的很慢！），界面也没任何反应，耐心等待，安装完成后如下图。</p><p>初始化并安装所需组件：</p><p>hexo init      # 初始化<br>npm install    # 安装组件<br>完成后依次输入下面命令，启动本地服务器进行预览：</p><p>hexo g   # 生成页面<br>hexo s   # 启动预览<br>访问 <a href="http://localhost:4000，出现">http://localhost:4000，出现</a> Hexo 默认页面，本地博客安装成功！</p><p>Tips：如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 hexo server -p 5000 更改端口号后重试。</p><p>Hexo 博客文件夹目录结构如下：</p><ol start="5"><li>部署 Hexo 到 GitHub Pages<br>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</li></ol><p>首先安装 hexo-deployer-git：</p><p>npm install hexo-deployer-git –save<br>然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：</p><p>deploy:<br>  type: git<br>  repository: <a class="link"   href="mailto:&#103;&#105;&#116;&#64;&#x67;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109;" >&#103;&#105;&#116;&#64;&#x67;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109;<i class="fas fa-external-link-alt"></i></a>:用户名&#x2F;用户名.github.io.git<br>  branch: master<br>完成后运行 hexo d 将网站上传部署到 GitHub Pages。</p><p>完成！这时访问我们的 GitHub 域名 https:&#x2F;&#x2F;用户名.github.io 就可以看到 Hexo 网站了。</p><ol start="6"><li>绑定域名（可选）<br>博客搭建完成使用的是 GitHub 的子域名（用户名.<a class="link"   href="http://github.io),我们可以为/" >http://github.io），我们可以为<i class="fas fa-external-link-alt"></i></a> Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。</li></ol><p>我们使用 Namesilo 进行注册，便宜好用没啥套路，使用优惠码 okoff 优惠一美元，com 域名大概 50 块一年。</p><p>域名注册和解析教程：Namesilo 域名购买及使用教程<br>按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 用户名.github.io。</p><p>进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 <a class="link"   href="http://www.example.com,保存名称为/" >http://www.example.com，保存名称为<i class="fas fa-external-link-alt"></i></a> “CNAME”，格式为 “所有文件”（无 .txt 后缀）。</p><p>清除缓存等文件并重新发布网站：</p><p>hexo clean   # 清除缓存文件等<br>hexo g       # 生成页面<br>hexo s       # 启动预览<br>现在就可以使用自己的域名访问 Hexo 博客了。</p><p>配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -&gt; 下拉找到 GitHub Pages -&gt; 勾选 Enforce HTTPS。</p><p>HTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！</p><ol start="7"><li>开始使用</li></ol><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p><p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p><p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。以后每次发布文章都是这两条命令。</p><p>hexo g   # 生成页面<br>hexo d   # 部署发布<br>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 hexo g 和 hexo d 发布。</p><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考官方文档按需要编辑。</p><p>在 Themes | Hexo 选择一个喜欢的主题，比如 NexT，进入网站目录打开 Git Bash Here 下载主题：</p><p>git clone <a class="link"   href="https://github.com/iissnan/hexo-theme-next" >https://github.com/iissnan/hexo-theme-next<i class="fas fa-external-link-alt"></i></a> themes&#x2F;next<br>然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</p><p>hexo new “name”       # 新建文章<br>hexo new page “name”  # 新建页面<br>hexo g                # 生成页面<br>hexo d                # 部署<br>hexo g -d             # 生成页面并部署<br>hexo s                # 本地预览<br>hexo clean            # 清除缓存和已生成的静态文件<br>hexo help             # 帮助<br>7. 开始使用</p><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p><p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p><p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。以后每次发布文章都是这两条命令。</p><p>hexo g   # 生成页面<br>hexo d   # 部署发布<br>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 hexo g 和 hexo d 发布。</p><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考官方文档按需要编辑。</p><p>在 Themes | Hexo 选择一个喜欢的主题，比如 NexT，进入网站目录打开 Git Bash Here 下载主题：</p><p>git clone <a class="link"   href="https://github.com/iissnan/hexo-theme-next" >https://github.com/iissnan/hexo-theme-next<i class="fas fa-external-link-alt"></i></a> themes&#x2F;next<br>然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</p><p>hexo new “name”       # 新建文章<br>hexo new page “name”  # 新建页面<br>hexo g                # 生成页面<br>hexo d                # 部署<br>hexo g -d             # 生成页面并部署<br>hexo s                # 本地预览<br>hexo clean            # 清除缓存和已生成的静态文件<br>hexo help             # 帮助<br>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考官方文档按需要编辑。</p><p>在 Themes | Hexo 选择一个喜欢的主题，比如 NexT，进入网站目录打开 Git Bash Here 下载主题：</p><p>git clone <a class="link"   href="https://github.com/iissnan/hexo-theme-next" >https://github.com/iissnan/hexo-theme-next<i class="fas fa-external-link-alt"></i></a> themes&#x2F;next<br>然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</p><p>hexo new “name”       # 新建文章<br>hexo new page “name”  # 新建页面<br>hexo g                # 生成页面<br>hexo d                # 部署<br>hexo g -d             # 生成页面并部署<br>hexo s                # 本地预览<br>hexo clean            # 清除缓存和已生成的静态文件<br>hexo help             # 帮助</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前言&lt;br&gt;近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。&lt;/p&gt;
&lt;p&gt;虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。</summary>
      
    
    
    
    <category term="免费" scheme="http://example.com/categories/%E5%85%8D%E8%B4%B9/"/>
    
    
    <category term="免费" scheme="http://example.com/tags/%E5%85%8D%E8%B4%B9/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Learn的Azure 临时RDP远程桌面</title>
    <link href="http://example.com/2022/06/22/window11/"/>
    <id>http://example.com/2022/06/22/window11/</id>
    <published>2022-06-22T15:34:25.337Z</published>
    <updated>2022-06-22T19:10:19.014Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的文章中，我描述过Microsoft Learn的远程桌面。但是那篇文章的方法只能用2个小时。本文的教程是使用Microsoft Learn的Azure的沙箱，来创建临时RDP远程桌面</p><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><h5 id="1-Microsoft-账号"><a href="#1-Microsoft-账号" class="headerlink" title="1. Microsoft 账号"></a>1. Microsoft 账号</h5><h5 id="2-远程桌面软件"><a href="#2-远程桌面软件" class="headerlink" title="2. 远程桌面软件"></a>2. 远程桌面软件</h5><ol start="3"><li>部署步骤</li><li>打开这个沙箱</li><li>点击“激活沙盒”按钮，如未登录Microsoft 账户的会自动跳转登录页面登录</li></ol><p>由于Azure沙盒微软是严格限制访问其外网的服务，因此这篇文章会用到我朋友写的加密破解脚本来创建VPS。在右边的Cloud Shell运行以下命令<br>复制成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -skLO bit.do/azurewinvmplus ; chmod +x azurewinvmplus ; ./azurewinvmplus</span><br></pre></td></tr></table></figure><p>选择VPS地区</p><p>选择系统</p><p>选择配置，然后等待创建</p><p>等待差不多5-10分钟，然后就可以看到RDP的登录信息了</p><p>微软远程桌面软件中，计算机名称填写刚刚提示的IP</p><p>输入用户名密码</p><p>连接到远程桌面，白嫖成功！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在之前的文章中，我描述过Microsoft Learn的远程桌面。但是那篇文章的方法只能用2个小时。本文的教程是使用Microsoft Learn的Azure的沙箱，来创建临时RDP远程桌面&lt;/p&gt;
&lt;h2 id=&quot;准备材料&quot;&gt;&lt;a href=&quot;#准备材料&quot; class=&quot;</summary>
      
    
    
    
    <category term="免费" scheme="http://example.com/categories/%E5%85%8D%E8%B4%B9/"/>
    
    
    <category term="免费" scheme="http://example.com/tags/%E5%85%8D%E8%B4%B9/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/06/22/hello-world/"/>
    <id>http://example.com/2022/06/22/hello-world/</id>
    <published>2022-06-22T12:56:13.560Z</published>
    <updated>2022-06-22T12:56:13.560Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Che</summary>
      
    
    
    
    
  </entry>
  
</feed>
